/* automatically generated by rust-bindgen 0.72.1 */

#[doc = " @brief Execution parameters for XeSS D3D11."]
#[repr(C)]
pub struct _xess_d3d11_execute_params_t {
    #[doc = " Input color texture."]
    pub pColorTexture: *mut ID3D11Resource,
    #[doc = " Input motion vector texture."]
    pub pVelocityTexture: *mut ID3D11Resource,
    #[doc = " Optional depth texture. Required if XESS_INIT_FLAG_HIGH_RES_MV has not been specified."]
    pub pDepthTexture: *mut ID3D11Resource,
    #[doc = " Optional 1x1 exposure scale texture. Required if XESS_INIT_FLAG_EXPOSURE_TEXTURE has been\n specified."]
    pub pExposureScaleTexture: *mut ID3D11Resource,
    #[doc = " Optional responsive pixel mask texture. Required if XESS_INIT_FLAG_RESPONSIVE_PIXEL_MASK\n has been specified."]
    pub pResponsivePixelMaskTexture: *mut ID3D11Resource,
    #[doc = " Output texture in target resolution."]
    pub pOutputTexture: *mut ID3D11Resource,
    #[doc = " Jitter X coordinate in the range [-0.5, 0.5]."]
    pub jitterOffsetX: f32,
    #[doc = " Jitter Y coordinate in the range [-0.5, 0.5]."]
    pub jitterOffsetY: f32,
    #[doc = " Optional input color scaling. Default is 1."]
    pub exposureScale: f32,
    #[doc = " Resets the history accumulation in this frame."]
    pub resetHistory: u32,
    #[doc = " Input color width."]
    pub inputWidth: u32,
    #[doc = " Input color height."]
    pub inputHeight: u32,
    #[doc = " Base coordinate for the input color in the texture. Default is (0,0)."]
    pub inputColorBase: xess_coord_t,
    #[doc = " Base coordinate for the input motion vector in the texture.  Default is (0,0)."]
    pub inputMotionVectorBase: xess_coord_t,
    #[doc = " Base coordinate for the input depth in the texture. Default is (0,0)."]
    pub inputDepthBase: xess_coord_t,
    #[doc = " Base coordinate for the input responsive pixel mask in the texture. Default is (0,0)."]
    pub inputResponsiveMaskBase: xess_coord_t,
    #[doc = " Reserved parameter."]
    pub reserved0: xess_coord_t,
    #[doc = " Base coordinate for the output color.  Default is (0,0)."]
    pub outputColorBase: xess_coord_t,
}
impl Default for _xess_d3d11_execute_params_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Execution parameters for XeSS D3D11."]
pub type xess_d3d11_execute_params_t = _xess_d3d11_execute_params_t;
#[doc = " @brief Initialization parameters for XeSS VK."]
#[repr(C)]
pub struct _xess_d3d11_init_params_t {
    #[doc = " Output width and height."]
    pub outputResolution: xess_2d_t,
    #[doc = " Quality setting"]
    pub qualitySetting: xess_quality_settings_t,
    #[doc = " Initialization flags."]
    pub initFlags: u32,
}
impl Default for _xess_d3d11_init_params_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Initialization parameters for XeSS VK."]
pub type xess_d3d11_init_params_t = _xess_d3d11_init_params_t;
pub struct XessLoaded {
    __library: ::libloading::Library,
    pub xessD3D11CreateContext: unsafe extern "C" fn(
        device: *mut ID3D11Device,
        phContext: *mut xess_context_handle_t,
    ) -> xess_result_t,
    pub xessD3D11Init: unsafe extern "C" fn(
        hContext: xess_context_handle_t,
        pInitParams: *const xess_d3d11_init_params_t,
    ) -> xess_result_t,
    pub xessD3D11GetInitParams: unsafe extern "C" fn(
        hContext: xess_context_handle_t,
        pInitParams: *mut xess_d3d11_init_params_t,
    ) -> xess_result_t,
    pub xessD3D11Execute: unsafe extern "C" fn(
        hContext: xess_context_handle_t,
        pExecParams: *const xess_d3d11_execute_params_t,
    ) -> xess_result_t,
}
impl XessLoaded {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let xessD3D11CreateContext = __library.get(b"xessD3D11CreateContext\0").map(|sym| *sym)?;
        let xessD3D11Init = __library.get(b"xessD3D11Init\0").map(|sym| *sym)?;
        let xessD3D11GetInitParams = __library.get(b"xessD3D11GetInitParams\0").map(|sym| *sym)?;
        let xessD3D11Execute = __library.get(b"xessD3D11Execute\0").map(|sym| *sym)?;
        Ok(XessLoaded {
            __library,
            xessD3D11CreateContext,
            xessD3D11Init,
            xessD3D11GetInitParams,
            xessD3D11Execute,
        })
    }
    #[doc = " @addtogroup xess-d3d11 XeSS D3D11 API exports\n @{\n/\n/**\n @brief Create an XeSS D3D11 context.\n @param device A D3D11 device created by the user.\n @param[out] phContext Returned xess context handle.\n @return XeSS return status code."]
    pub unsafe fn xessD3D11CreateContext(
        &self,
        device: *mut ID3D11Device,
        phContext: *mut xess_context_handle_t,
    ) -> xess_result_t {
        (self.xessD3D11CreateContext)(device, phContext)
    }
    #[doc = " @brief Initialize XeSS D3D11.\n This is a blocking call that initializes XeSS and triggers internal\n resources allocation and JIT for the XeSS kernels. The user must ensure that\n any pending command lists are completed before re-initialization. When\n During initialization, XeSS can create staging buffers and copy queues to\n upload internal data. These will be destroyed at the end of initialization.\n\n @param hContext: The XeSS context handle.\n @param pInitParams: Initialization parameters.\n @return XeSS return status code."]
    pub unsafe fn xessD3D11Init(
        &self,
        hContext: xess_context_handle_t,
        pInitParams: *const xess_d3d11_init_params_t,
    ) -> xess_result_t {
        (self.xessD3D11Init)(hContext, pInitParams)
    }
    #[doc = " @brief Get XeSS D3D11 initialization parameters.\n\n @note This function will return @ref XESS_RESULT_ERROR_UNINITIALIZED if @ref xessD3D11Init has not been called.\n\n @param hContext: The XeSS context handle.\n @param[out] pInitParams: Returned initialization parameters.\n @return XeSS return status code."]
    pub unsafe fn xessD3D11GetInitParams(
        &self,
        hContext: xess_context_handle_t,
        pInitParams: *mut xess_d3d11_init_params_t,
    ) -> xess_result_t {
        (self.xessD3D11GetInitParams)(hContext, pInitParams)
    }
    #[doc = " @brief Record XeSS upscaling commands into the command list.\n @param hContext: The XeSS context handle.\n @param pExecParams: Execution parameters.\n @return XeSS return status code."]
    pub unsafe fn xessD3D11Execute(
        &self,
        hContext: xess_context_handle_t,
        pExecParams: *const xess_d3d11_execute_params_t,
    ) -> xess_result_t {
        (self.xessD3D11Execute)(hContext, pExecParams)
    }
}
