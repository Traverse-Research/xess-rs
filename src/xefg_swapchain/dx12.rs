/* automatically generated by rust-bindgen 0.72.1 */

#[doc = " @brief Initialization parameters.\n Optional external allocations are only available for the internal XeSS-FG resources,\n the Swap Chain API resources will still be managed by the API."]
#[repr(C)]
pub struct _xefg_swapchain_d3d12_init_params_t {
    #[doc = " Pointer to the application swap chain."]
    pub pApplicationSwapChain: *mut IDXGISwapChain,
    #[doc = " Initialization flags."]
    pub initFlags: u32,
    #[doc = " Maximum number of frames to interpolate, it must be 1."]
    pub maxInterpolatedFrames: u32,
    #[doc = " Specifies the node mask for internally created resources on\n multi-adapter systems."]
    pub creationNodeMask: u32,
    #[doc = " Specifies the node visibility mask for internally created resources\n on multi-adapter systems."]
    pub visibleNodeMask: u32,
    #[doc = " Optional externally allocated buffer storage for XeSS-FG. If NULL the\n storage is allocated internally. If allocated, the heap type must be\n D3D12_HEAP_TYPE_DEFAULT. This heap is not accessed by the CPU."]
    pub pTempBufferHeap: *mut ID3D12Heap,
    #[doc = " Offset in the externally allocated heap for temporary buffer storage."]
    pub bufferHeapOffset: u64,
    #[doc = " Optional externally allocated texture storage for XeSS-FG. If NULL the\n storage is allocated internally. If allocated, the heap type must be\n D3D12_HEAP_TYPE_DEFAULT. This heap is not accessed by the CPU."]
    pub pTempTextureHeap: *mut ID3D12Heap,
    #[doc = " Offset in the externally allocated heap for temporary texture storage."]
    pub textureHeapOffset: u64,
    #[doc = " Pointer to pipeline library. If not NULL, then it will be used for pipeline caching."]
    pub pPipelineLibrary: *mut ID3D12PipelineLibrary,
    #[doc = " Optional UI handling mode. Use XEFG_SWAPCHAIN_UI_MODE_AUTO to determine UI handling mode internally\n based on provided inputs: hudless color and UI texture."]
    pub uiMode: xefg_swapchain_ui_mode_t,
}
impl Default for _xefg_swapchain_d3d12_init_params_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Initialization parameters.\n Optional external allocations are only available for the internal XeSS-FG resources,\n the Swap Chain API resources will still be managed by the API."]
pub type xefg_swapchain_d3d12_init_params_t = _xefg_swapchain_d3d12_init_params_t;
#[doc = " @brief Contains all fields needed when providing a resource to\n the library, describing its state, lifetime, range and so on."]
#[repr(C)]
pub struct _xefg_swapchain_d3d12_resource_data_t {
    #[doc = " XeSS-FG type of the resource."]
    pub type_: xefg_swapchain_resource_type_t,
    #[doc = " Time period this resource is valid for."]
    pub validity: xefg_swapchain_resource_validity_t,
    #[doc = " Base offset to the resource data."]
    pub resourceBase: xefg_swapchain_2d_t,
    #[doc = " Valid extent of the resource."]
    pub resourceSize: xefg_swapchain_2d_t,
    #[doc = " D3D12Resource object for this resource."]
    pub pResource: *mut ID3D12Resource,
    #[doc = " Incoming state of the resource."]
    pub incomingState: D3D12_RESOURCE_STATES,
}
impl Default for _xefg_swapchain_d3d12_resource_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Contains all fields needed when providing a resource to\n the library, describing its state, lifetime, range and so on."]
pub type xefg_swapchain_d3d12_resource_data_t = _xefg_swapchain_d3d12_resource_data_t;
pub struct Functions {
    __library: ::libloading::Library,
    pub xefgSwapChainD3D12CreateContext: unsafe extern "C" fn(
        pDevice: *mut ID3D12Device,
        phSwapChain: *mut xefg_swapchain_handle_t,
    ) -> xefg_swapchain_result_t,
    pub xefgSwapChainD3D12BuildPipelines: unsafe extern "C" fn(
        hSwapChain: xefg_swapchain_handle_t,
        pPipelineLibrary: *mut ID3D12PipelineLibrary,
        blocking: bool,
        initFlags: u32,
    ) -> xefg_swapchain_result_t,
    pub xefgSwapChainD3D12InitFromSwapChain: unsafe extern "C" fn(
        hSwapChain: xefg_swapchain_handle_t,
        pCmdQueue: *mut ID3D12CommandQueue,
        pInitParams: *const xefg_swapchain_d3d12_init_params_t,
    ) -> xefg_swapchain_result_t,
    pub xefgSwapChainD3D12InitFromSwapChainDesc: unsafe extern "C" fn(
        hSwapChain: xefg_swapchain_handle_t,
        hWnd: HWND,
        pSwapChainDesc: *const DXGI_SWAP_CHAIN_DESC1,
        pFullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC,
        pCmdQueue: *mut ID3D12CommandQueue,
        pDxgiFactory: *mut IDXGIFactory2,
        pInitParams: *const xefg_swapchain_d3d12_init_params_t,
    )
        -> xefg_swapchain_result_t,
    pub xefgSwapChainD3D12GetSwapChainPtr: unsafe extern "C" fn(
        hSwapChain: xefg_swapchain_handle_t,
        riid: *const IID,
        ppSwapChain: *mut *mut ::std::os::raw::c_void,
    ) -> xefg_swapchain_result_t,
    pub xefgSwapChainD3D12TagFrameResource: unsafe extern "C" fn(
        hSwapChain: xefg_swapchain_handle_t,
        pCmdList: *mut ID3D12CommandList,
        presentId: u32,
        pResData: *const xefg_swapchain_d3d12_resource_data_t,
    ) -> xefg_swapchain_result_t,
    pub xefgSwapChainD3D12SetDescriptorHeap: unsafe extern "C" fn(
        hSwapChain: xefg_swapchain_handle_t,
        pDescriptorHeap: *mut ID3D12DescriptorHeap,
        descriptorHeapOffsetInBytes: u32,
    ) -> xefg_swapchain_result_t,
}
impl Functions {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let xefgSwapChainD3D12CreateContext = __library
            .get(b"xefgSwapChainD3D12CreateContext\0")
            .map(|sym| *sym)?;
        let xefgSwapChainD3D12BuildPipelines = __library
            .get(b"xefgSwapChainD3D12BuildPipelines\0")
            .map(|sym| *sym)?;
        let xefgSwapChainD3D12InitFromSwapChain = __library
            .get(b"xefgSwapChainD3D12InitFromSwapChain\0")
            .map(|sym| *sym)?;
        let xefgSwapChainD3D12InitFromSwapChainDesc = __library
            .get(b"xefgSwapChainD3D12InitFromSwapChainDesc\0")
            .map(|sym| *sym)?;
        let xefgSwapChainD3D12GetSwapChainPtr = __library
            .get(b"xefgSwapChainD3D12GetSwapChainPtr\0")
            .map(|sym| *sym)?;
        let xefgSwapChainD3D12TagFrameResource = __library
            .get(b"xefgSwapChainD3D12TagFrameResource\0")
            .map(|sym| *sym)?;
        let xefgSwapChainD3D12SetDescriptorHeap = __library
            .get(b"xefgSwapChainD3D12SetDescriptorHeap\0")
            .map(|sym| *sym)?;
        Ok(Functions {
            __library,
            xefgSwapChainD3D12CreateContext,
            xefgSwapChainD3D12BuildPipelines,
            xefgSwapChainD3D12InitFromSwapChain,
            xefgSwapChainD3D12InitFromSwapChainDesc,
            xefgSwapChainD3D12GetSwapChainPtr,
            xefgSwapChainD3D12TagFrameResource,
            xefgSwapChainD3D12SetDescriptorHeap,
        })
    }
    #[doc = " @brief Creates a swap chain handle and checks necessary D3D12 features.\n\n @param pDevice A D3D12 device created by the user.\n\n @param[out] phSwapChain Pointer to a XeSS-FG swap chain context handle.\n\n @return XeSS-FG Swap Chain return status code."]
    pub unsafe fn xefgSwapChainD3D12CreateContext(
        &self,
        pDevice: *mut ID3D12Device,
        phSwapChain: *mut xefg_swapchain_handle_t,
    ) -> xefg_swapchain_result_t {
        (self.xefgSwapChainD3D12CreateContext)(pDevice, phSwapChain)
    }
    #[doc = " @brief Initiates pipeline build process\n This function can only be called between @ref xefgSwapChainD3D12CreateContext and\n any initialization function\n This call initiates build of DX12 pipelines and kernel compilation\n This call can be blocking (if @p blocking set to true) or non-blocking.\n In case of non-blocking call library will wait for pipeline build on call to\n initialization function\n If @p pPipelineLibrary passed to this call - same pipeline library must be passed\n to initialization function\n Pipeline build status can be retrieved using @ref xefgSwapChainGetPipelineBuildStatus\n\n @param hSwapChain The XeSS-FG Swap Chain context handle.\n @param pPipelineLibrary Optional pointer to pipeline library for pipeline caching.\n @param blocking Wait for kernel compilation and pipeline creation to finish or not\n @param initFlags Initialization flags. *Must* be identical to flags passed to initialization function"]
    pub unsafe fn xefgSwapChainD3D12BuildPipelines(
        &self,
        hSwapChain: xefg_swapchain_handle_t,
        pPipelineLibrary: *mut ID3D12PipelineLibrary,
        blocking: bool,
        initFlags: u32,
    ) -> xefg_swapchain_result_t {
        (self.xefgSwapChainD3D12BuildPipelines)(hSwapChain, pPipelineLibrary, blocking, initFlags)
    }
    #[doc = " @brief Initializes the XeSS-FG Swap Chain library for the generation\n and presentation of additional frames.\n The application should call @ref xefgSwapChainD3D12GetSwapChainPtr to retrieve the actual IDXGISwapChain handle.\n\n @param hSwapChain The XeSS-FG Swap Chain context handle.\n\n @param pCmdQueue Command queue used by the application\n to present frames. This queue must conform to all restrictions of any IDXGISwapChain.\n\n @param pInitParams XeSS-FG Swap Chain API initialization parameters.\n\n @return XeSS-FG Swap Chain return status code."]
    pub unsafe fn xefgSwapChainD3D12InitFromSwapChain(
        &self,
        hSwapChain: xefg_swapchain_handle_t,
        pCmdQueue: *mut ID3D12CommandQueue,
        pInitParams: *const xefg_swapchain_d3d12_init_params_t,
    ) -> xefg_swapchain_result_t {
        (self.xefgSwapChainD3D12InitFromSwapChain)(hSwapChain, pCmdQueue, pInitParams)
    }
    #[doc = " @brief Initializes the XeSS-FG Swap Chain library for the generation\n and presentation of additional frames.\n The application should call @ref xefgSwapChainD3D12GetSwapChainPtr to retrieve the actual IDXGISwapChain handle.\n\n @param hSwapChain The XeSS-FG Swap Chain context handle.\n\n @param hWnd Window handle used to create the swap chain.\n\n @param pSwapChainDesc Swap chain description.\n\n @param pFullscreenDesc Fullscreen swap chain description. Can be set to NULL.\n\n @param pCmdQueue Command queue used by the application\n to present frames. This queue must conform to all restrictions of any IDXGISwapChain.\n\n @param pDxgiFactory IDXGIFactory2 object to be used for the swap chain creation.\n\n @param pInitParams XeSS-FG Swap Chain API initialization parameters.\n @p pApplicationSwapChain field will not be used and must be set to NULL, a swap chain will be created according to @p hWnd, @p pSwapChainDesc and @p pFullscreenDesc.\n\n @return XeSS-FG Swap Chain return status code."]
    pub unsafe fn xefgSwapChainD3D12InitFromSwapChainDesc(
        &self,
        hSwapChain: xefg_swapchain_handle_t,
        hWnd: HWND,
        pSwapChainDesc: *const DXGI_SWAP_CHAIN_DESC1,
        pFullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC,
        pCmdQueue: *mut ID3D12CommandQueue,
        pDxgiFactory: *mut IDXGIFactory2,
        pInitParams: *const xefg_swapchain_d3d12_init_params_t,
    ) -> xefg_swapchain_result_t {
        (self.xefgSwapChainD3D12InitFromSwapChainDesc)(
            hSwapChain,
            hWnd,
            pSwapChainDesc,
            pFullscreenDesc,
            pCmdQueue,
            pDxgiFactory,
            pInitParams,
        )
    }
    #[doc = " @brief Gets a pointer to a DXGI swap chain. The application must use it for\n all presentation in the application.\n\n @param hSwapChain The XeSS-FG Swap Chain context handle.\n\n @param riid Type of the interface to which the caller wants a pointer.\n\n @param[out] ppSwapChain Pointer to a IDXGISwapChain handle.\n\n @return XeSS-FG Swap Chain return status code."]
    pub unsafe fn xefgSwapChainD3D12GetSwapChainPtr(
        &self,
        hSwapChain: xefg_swapchain_handle_t,
        riid: *const IID,
        ppSwapChain: *mut *mut ::std::os::raw::c_void,
    ) -> xefg_swapchain_result_t {
        (self.xefgSwapChainD3D12GetSwapChainPtr)(hSwapChain, riid, ppSwapChain)
    }
    #[doc = " @brief Informs the XeSS-FG swap chain library of the frame resources used to generate a frame\n that will be presented.\n\n @attention This function can be used to provide information about the interpolation region within the\n backbuffer by using @p XEFG_SWAPCHAIN_RES_BACKBUFFER resource type. In that case only information about region (size\n and offset) is used from the @p pResData argument.\n\n @param hSwapChain The swap chain associated with the resource being tagged.\n\n @param pCmdList Optional command list utilized to manage the resource\n lifetime. It is only required if the resource is not valid until the next\n present call.\n\n @param presentId The unique frame identifier this resource is associated with.\n\n @param pResData The resource and the information needed to properly\n manage and interpret it.\n\n @return XeSS-FG Swap Chain return status code."]
    pub unsafe fn xefgSwapChainD3D12TagFrameResource(
        &self,
        hSwapChain: xefg_swapchain_handle_t,
        pCmdList: *mut ID3D12CommandList,
        presentId: u32,
        pResData: *const xefg_swapchain_d3d12_resource_data_t,
    ) -> xefg_swapchain_result_t {
        (self.xefgSwapChainD3D12TagFrameResource)(hSwapChain, pCmdList, presentId, pResData)
    }
    #[doc = " @brief Informs the XeSS-FG swap chain library of the descriptor heap to use during frame generation. This API\n needs to be called before presenting a frame. The descriptor heap must be a D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV.\n\n @param hSwapChain The XeSS-FG Swap Chain context handle.\n\n @param pDescriptorHeap a pointer to the ID3D12DescriptorHeap object used during interpolation programming.\n\n @param descriptorHeapOffsetInBytes The offset within @p pDescriptorHeap XeSS-FG will start using during interpolation\n programming, in bytes. This value is number of descriptors to skip times GetDescriptorHandleIncrementSize().\n\n @return XeSS-FG Swap Chain return status code."]
    pub unsafe fn xefgSwapChainD3D12SetDescriptorHeap(
        &self,
        hSwapChain: xefg_swapchain_handle_t,
        pDescriptorHeap: *mut ID3D12DescriptorHeap,
        descriptorHeapOffsetInBytes: u32,
    ) -> xefg_swapchain_result_t {
        (self.xefgSwapChainD3D12SetDescriptorHeap)(
            hSwapChain,
            pDescriptorHeap,
            descriptorHeapOffsetInBytes,
        )
    }
}
