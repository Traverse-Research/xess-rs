/* automatically generated by rust-bindgen 0.72.1 */

pub struct Functions {
    __library: ::libloading::Library,
    pub xellD3D12CreateContext: unsafe extern "C" fn(
        device: *mut ID3D12Device,
        out_context: *mut xell_context_handle_t,
    ) -> xell_result_t,
}
impl Functions {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let xellD3D12CreateContext = __library.get(b"xellD3D12CreateContext\0").map(|sym| *sym)?;
        Ok(Functions {
            __library,
            xellD3D12CreateContext,
        })
    }
    #[doc = " @brief Create the XeLL DX12 context .\n @param[in] device: DX12 device\n @param[out] out_context: Returned XeLL context handle.\n @return XeLL return status code."]
    pub unsafe fn xellD3D12CreateContext(
        &self,
        device: *mut ID3D12Device,
        out_context: *mut xell_context_handle_t,
    ) -> xell_result_t {
        (self.xellD3D12CreateContext)(device, out_context)
    }
}
